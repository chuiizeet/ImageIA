#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0.1 effective-4.2 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TCMask",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIImage;

/// TCMask is the masking result from TCMaskView
SWIFT_CLASS("_TtC6TCMask6TCMask")
@interface TCMask : NSObject
/// Data of masking result
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// Size of mask
@property (nonatomic, readonly) CGSize size;
/// Initialize a TCMask
- (nonnull instancetype)initWithData:(NSArray<NSNumber *> * _Nonnull)data size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// Create a gray scale UIImage from mask
///
/// returns:
/// Gray scale image converted from mask
- (UIImage * _Nonnull)grayScaleImage SWIFT_WARN_UNUSED_RESULT;
/// Create a RGBA UIImage from mask
///
/// returns:
/// RGBA image converted from mask, with the alpha info of premultiplied last. If a pixel value of mask is v, the corrosponding pixel value of returned RGBA image is (v, v, v, v)
- (UIImage * _Nonnull)rgbaImage SWIFT_WARN_UNUSED_RESULT;
/// Create a new mask which is the inversion of the original mask
- (TCMask * _Nonnull)inverted SWIFT_WARN_UNUSED_RESULT;
/// Cutout a image using mask
/// \param image Image to cutout
///
/// \param resize Specify true to resize the output image to fit the result size
///
///
/// returns:
/// Nil if resize is set to true and mask only contains 0, otherwise image with cutout
- (UIImage * _Nullable)cutoutWithImage:(UIImage * _Nonnull)image resize:(BOOL)resize SWIFT_WARN_UNUSED_RESULT;
/// Create an image blended with mask
/// \param foregroundImage Foregournd image, image size should match mask size
///
/// \param backgroundImage Background image, image size should match mask size
///
///
/// returns:
/// Blended image
- (UIImage * _Nonnull)blendWithForegroundImage:(UIImage * _Nonnull)foregroundImage backgroundImage:(UIImage * _Nonnull)backgroundImage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Image masking tool
typedef SWIFT_ENUM(NSInteger, TCMaskTool, closed) {
/// Brush tool
  TCMaskToolBrush = 0,
/// Quick select tool
  TCMaskToolQuickSelect = 1,
/// Hair brush tool
  TCMaskToolHairBrush = 2,
};

@protocol TCMaskViewDelegate;
@class TCMaskViewMode;
@class TCUIView;
enum TCMaskViewState : NSInteger;
@class UIViewController;
@class UINavigationController;

/// The module that displays a UIViewController for image masking.
/// A minimum implementation to present a TCMaskview within a UIViewController class is:
/// \code
/// // Create TCMaskView, specifying the image for masking.
/// let maskView = TCMaskView(image: self.image)
///
/// // Present TCMaskView from current view controller.
/// maskView.present(from: self, animated: true)
///
/// \endcode
SWIFT_CLASS("_TtC6TCMask10TCMaskView")
@interface TCMaskView : NSObject
/// Localization dictionary, set it before you create any <code>TCMaskView</code>.
/// An english fallback localization will be used when no matching localization is found.
/// To determine the matching language TinyCrayon SDK uses <code>NSLocale.preferredLanguages</code>.
/// To add suport for a language, set a localization dictionary like so:
/// \code
/// TCMaskView.localizationDictionary =  [
///    "Quick Select" : "Quick Select",
///    "Hair Brush" : "Hair Brush",
///    "Brush" : "Brush",
///    "Add" : "Add",
///    "Subtract" : "Subtract",
///    "Setting" : "Setting",
///    "Invert" : "Invert",
///    "Brush size" : "Brush size",
///    "Hardness" : "Hardness",
///    "Opacity" : "Opacity",
///    "Tips-Draw" : "Draw on the places to select/erase",
///    "Tips-Zoom" : "Pinch to zoom in/out to refine details",
///    "Tips-Move" : "Use two fingers dragging to move"
/// ]
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nonnull localizationDictionary;)
+ (NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nonnull)localizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationDictionary:(NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nonnull)value;
/// Initialize a TCMaskView
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
/// Optional delegate object that receives exit/completion notifications from this TCMaskView.
@property (nonatomic, weak) id <TCMaskViewDelegate> _Nullable delegate;
/// View modes of TCMaskView, if no viewModes is provided or by default, TCMaskView will use the following view modes:
/// \code
/// viewModes[0] = TCMaskViewMode(foregroundColor: UIColor(white: 1, alpha: 0.5), backgroundImage: nil, isInverted: true);
/// viewModes[1] = TCMaskViewMode.transparent()
/// viewModes[2] = TCMaskViewMode(foregroundColor: UIColor.black, backgroundImage: nil, isInverted: true)
///
/// \endcode
@property (nonatomic, copy) NSArray<TCMaskViewMode *> * _Nonnull viewModes;
/// Initial tool when TCMaskView is presented
@property (nonatomic) enum TCMaskTool initialTool;
/// True if the status bar should be hidden or false if it should be shown.
@property (nonatomic) BOOL prefersStatusBarHidden;
/// The style of the device’s status bar.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// Top bar of TCMaskView
@property (nonatomic, strong) TCUIView * _Nonnull topBar;
/// Bottom bar of TCMaskView
@property (nonatomic, strong) TCUIView * _Nonnull bottomBar;
/// Tool panel of TCMaskView
@property (nonatomic, strong) TCUIView * _Nonnull toolMenu;
/// Setting view of TCMaskView
@property (nonatomic, strong) TCUIView * _Nonnull settingView;
/// Image view of TCMaskView
@property (nonatomic, strong) TCUIView * _Nonnull imageView;
/// Test devices in development
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull testDevices;
/// Initial state of TCMaskView
@property (nonatomic) enum TCMaskViewState initialState;
/// Presents the TCMaskView controller modally, which takes over the entire screen until the user closes or completes it.
/// Set rootViewController to the current view controller at the time this method is called.
/// <em>Delegates:</em>
/// tcMaskViewDidExit: is called before TCMaskView is about to exit
/// tcMaskViewDidComplete: is called before TCMaskView is about to complete
/// \param rootViewController The root view controller from which TCMaskView controller is presented
///
/// \param animated Specify true to animate the transition or false if you do not want the transition to be animated.
///
- (void)presentFromRootViewController:(UIViewController * _Nonnull)rootViewController animated:(BOOL)animated;
/// Pushes a TCMaskView controller onto the navigationController’s stack and updates the display.
/// TCMaskView becomes the top view controller on the navigation stack. Pushing a view controller causes its view to be embedded in the navigation interface. If the animated parameter is true, the view is animated into position; otherwise, the view is simply displayed in its final location.
/// In addition to displaying the view associated with the new view controller at the top of the stack, this method also updates the navigation bar and tool bar accordingly. For information on how the navigation bar is updated, see Updating the Navigation Bar.
/// <em>Delegates:</em>
/// tcMaskViewDidExit: is called before TCMaskView is about to exit
/// tcMaskViewDidComplete: is called before TCMaskView is about to complete
/// tcMaskViewWillPushViewController: is called before navigation controller is about to accomplish TCMaskView and process to the next UIViewController
/// \param navigationController UINavigationController onto which TCMaskView is pushed
///
/// \param animated Specify true to animate the transition or false if you do not want the transition to be animated.
///
- (void)presentFromNavigationController:(UINavigationController * _Nonnull)navigationController animated:(BOOL)animated;
/// Set the initial mask value of TCMaksView.
/// \param mask Initial mask value, the entire initial mask will be filled with this value
///
- (void)setInitialMaskWithValue:(uint8_t)mask;
/// Set the initial mask value of TCMaksView.
/// \param mask Initial mask value, mask length should match TCMaskView image size (mask.count == image.size.width * image.size.height)
///
- (void)setInitialMaskWithArray:(NSArray<NSNumber *> * _Nonnull)mask;
/// Set the initial mask value of TCMaksView.
/// \param mask Initial mask value
///
/// \param size Size of mask, mask length should match size (mask.count == size.width * size.height), if size is not the same as image size, the initial mask will be scalled to fit image size.
///
- (void)setInitialMask:(NSArray<NSNumber *> * _Nonnull)mask size:(CGSize)size;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Delegate methods for TCMaskView, which includes:
/// <ul>
///   <li>
///     tcMaskViewDidExit: is called after TCMaskView exits
///   </li>
///   <li>
///     tcMaskViewDidComplete: is called after a popup TCMaskView completes
///   </li>
///   <li>
///     tcMaskViewWillPushViewController: is called before navigation controller is about to accomplish TCMaskView and process to the next UIViewController
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP6TCMask18TCMaskViewDelegate_")
@protocol TCMaskViewDelegate
@optional
/// Called when the user taps ‘X’ button and TCMaskView exits.
/// \param mask Image masking result
///
/// \param image The original image provided to TCMaskView when ‘present’ was called
///
- (void)tcMaskViewDidExitWithMask:(TCMask * _Nonnull)mask image:(UIImage * _Nonnull)image;
/// Called when the user taps ‘✓’ button and TCMaskView completes.
/// \param mask Image masking result
///
/// \param image The original image provided to TCMaskView when ‘present’ was called
///
- (void)tcMaskViewDidCompleteWithMask:(TCMask * _Nonnull)mask image:(UIImage * _Nonnull)image;
/// Called when the user taps ‘->’ button and UINavigationController is about to process to next UIViewController.
/// \param mask Image masking result
///
/// \param image The original image provided to TCMaskView when ‘present’ was called
///
///
/// returns:
/// The next UIViewController where UINavigationController is about to process to
- (UIViewController * _Null_unspecified)tcMaskViewWillPushViewControllerWithMask:(TCMask * _Nonnull)mask image:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
@end

@class UIColor;

/// TCMaskViewMode defines how the current masking result is shown to the user, the result value (v) shown to user is blended with current mask (m) by foreground image/color (f) and background image/color (b):
/// <ul>
///   <li>
///     If inverted is false: v = f * m + b * (1 - m)
///   </li>
///   <li>
///     If inverted is true: v = f * (1 - m) + b * m
///   </li>
/// </ul>
/// For both foreground and background settings:
/// <ul>
///   <li>
///     If image is not nil, image will be used
///   </li>
///   <li>
///     If image is nil and color is not nil, color will be used
///   </li>
///   <li>
///     If both image and color are nil, foreground will be set to a PNG transparent color and background will be set to the image of masking
///   </li>
/// </ul>
SWIFT_CLASS("_TtC6TCMask14TCMaskViewMode")
@interface TCMaskViewMode : NSObject
/// Initialize a TCMaskViewMode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize a TCMaskViewMode
- (nonnull instancetype)initWithForegroundColor:(UIColor * _Nonnull)foregroundColor backgroundColor:(UIColor * _Nonnull)backgroundColor isInverted:(BOOL)isInverted OBJC_DESIGNATED_INITIALIZER;
/// Initialize a TCMaskViewMode
- (nonnull instancetype)initWithForegroundImage:(UIImage * _Null_unspecified)foregroundImage backgroundColor:(UIColor * _Nonnull)backgroundColor isInverted:(BOOL)isInverted OBJC_DESIGNATED_INITIALIZER;
/// Initialize a TCMaskViewMode
- (nonnull instancetype)initWithForegroundColor:(UIColor * _Nonnull)foregroundColor backgroundImage:(UIImage * _Null_unspecified)backgroundImage isInverted:(BOOL)isInverted OBJC_DESIGNATED_INITIALIZER;
/// Initialize a TCMaskViewMode
- (nonnull instancetype)initWithForegroundImage:(UIImage * _Null_unspecified)foregroundImage backgroundImage:(UIImage * _Null_unspecified)backgroundImage isInverted:(BOOL)isInverted OBJC_DESIGNATED_INITIALIZER;
/// Background color of TCMaskViewMode
@property (nonatomic, strong) UIColor * _Null_unspecified backgroundColor;
/// Foreground color of TCMaskViewMode
@property (nonatomic, strong) UIColor * _Null_unspecified foregroundColor;
/// Background image of TCMaskViewMode
@property (nonatomic, strong) UIImage * _Null_unspecified backgroundImage;
/// Foreground image of TCMaskViewMode
@property (nonatomic, strong) UIImage * _Null_unspecified foregroundImage;
/// A Boolean value that determines whether the blending between foreground and background color/image should be inverted.
/// The default value is false.
@property (nonatomic) BOOL isInverted;
/// Create a TCMaskViewMode which looks like a PNG transparent pattern.
///
/// returns:
/// A new TCMaskViewMode which looks like a PNG transparent pattern.
+ (TCMaskViewMode * _Nonnull)transparent SWIFT_WARN_UNUSED_RESULT;
@end

/// State of TCMaskView
typedef SWIFT_ENUM(NSInteger, TCMaskViewState, closed) {
/// Add
  TCMaskViewStateAdd = 0,
/// Subtract
  TCMaskViewStateSubtract = 1,
};


/// The TCUIView defines a UI component in TCMaskView.
/// You can change the property in TCUIView to customize the UI style of TCMaskView
SWIFT_CLASS("_TtC6TCMask8TCUIView")
@interface TCUIView : NSObject
/// Background color of the view
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Tint color of the view, inside which the color of all the buttons and icons will be set to tint color
@property (nonatomic, strong) UIColor * _Nonnull tintColor;
/// Highlighted color of the view, inside which the highlighted color of all the buttons and icons will be set to highlighted color
@property (nonatomic, strong) UIColor * _Nonnull highlightedColor;
/// Text color of the view, inside which the text color of all the labels will be set to text color
@property (nonatomic, strong) UIColor * _Nonnull textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end











#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0.1 effective-4.2 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TCMask",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIImage;

/// TCMask is the masking result from TCMaskView
SWIFT_CLASS("_TtC6TCMask6TCMask")
@interface TCMask : NSObject
/// Data of masking result
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// Size of mask
@property (nonatomic, readonly) CGSize size;
/// Initialize a TCMask
- (nonnull instancetype)initWithData:(NSArray<NSNumber *> * _Nonnull)data size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// Create a gray scale UIImage from mask
///
/// returns:
/// Gray scale image converted from mask
- (UIImage * _Nonnull)grayScaleImage SWIFT_WARN_UNUSED_RESULT;
/// Create a RGBA UIImage from mask
///
/// returns:
/// RGBA image converted from mask, with the alpha info of premultiplied last. If a pixel value of mask is v, the corrosponding pixel value of returned RGBA image is (v, v, v, v)
- (UIImage * _Nonnull)rgbaImage SWIFT_WARN_UNUSED_RESULT;
/// Create a new mask which is the inversion of the original mask
- (TCMask * _Nonnull)inverted SWIFT_WARN_UNUSED_RESULT;
/// Cutout a image using mask
/// \param image Image to cutout
///
/// \param resize Specify true to resize the output image to fit the result size
///
///
/// returns:
/// Nil if resize is set to true and mask only contains 0, otherwise image with cutout
- (UIImage * _Nullable)cutoutWithImage:(UIImage * _Nonnull)image resize:(BOOL)resize SWIFT_WARN_UNUSED_RESULT;
/// Create an image blended with mask
/// \param foregroundImage Foregournd image, image size should match mask size
///
/// \param backgroundImage Background image, image size should match mask size
///
///
/// returns:
/// Blended image
- (UIImage * _Nonnull)blendWithForegroundImage:(UIImage * _Nonnull)foregroundImage backgroundImage:(UIImage * _Nonnull)backgroundImage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Image masking tool
typedef SWIFT_ENUM(NSInteger, TCMaskTool, closed) {
/// Brush tool
  TCMaskToolBrush = 0,
/// Quick select tool
  TCMaskToolQuickSelect = 1,
/// Hair brush tool
  TCMaskToolHairBrush = 2,
};

@protocol TCMaskViewDelegate;
@class TCMaskViewMode;
@class TCUIView;
enum TCMaskViewState : NSInteger;
@class UIViewController;
@class UINavigationController;

/// The module that displays a UIViewController for image masking.
/// A minimum implementation to present a TCMaskview within a UIViewController class is:
/// \code
/// // Create TCMaskView, specifying the image for masking.
/// let maskView = TCMaskView(image: self.image)
///
/// // Present TCMaskView from current view controller.
/// maskView.present(from: self, animated: true)
///
/// \endcode
SWIFT_CLASS("_TtC6TCMask10TCMaskView")
@interface TCMaskView : NSObject
/// Localization dictionary, set it before you create any <code>TCMaskView</code>.
/// An english fallback localization will be used when no matching localization is found.
/// To determine the matching language TinyCrayon SDK uses <code>NSLocale.preferredLanguages</code>.
/// To add suport for a language, set a localization dictionary like so:
/// \code
/// TCMaskView.localizationDictionary =  [
///    "Quick Select" : "Quick Select",
///    "Hair Brush" : "Hair Brush",
///    "Brush" : "Brush",
///    "Add" : "Add",
///    "Subtract" : "Subtract",
///    "Setting" : "Setting",
///    "Invert" : "Invert",
///    "Brush size" : "Brush size",
///    "Hardness" : "Hardness",
///    "Opacity" : "Opacity",
///    "Tips-Draw" : "Draw on the places to select/erase",
///    "Tips-Zoom" : "Pinch to zoom in/out to refine details",
///    "Tips-Move" : "Use two fingers dragging to move"
/// ]
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nonnull localizationDictionary;)
+ (NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nonnull)localizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationDictionary:(NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nonnull)value;
/// Initialize a TCMaskView
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
/// Optional delegate object that receives exit/completion notifications from this TCMaskView.
@property (nonatomic, weak) id <TCMaskViewDelegate> _Nullable delegate;
/// View modes of TCMaskView, if no viewModes is provided or by default, TCMaskView will use the following view modes:
/// \code
/// viewModes[0] = TCMaskViewMode(foregroundColor: UIColor(white: 1, alpha: 0.5), backgroundImage: nil, isInverted: true);
/// viewModes[1] = TCMaskViewMode.transparent()
/// viewModes[2] = TCMaskViewMode(foregroundColor: UIColor.black, backgroundImage: nil, isInverted: true)
///
/// \endcode
@property (nonatomic, copy) NSArray<TCMaskViewMode *> * _Nonnull viewModes;
/// Initial tool when TCMaskView is presented
@property (nonatomic) enum TCMaskTool initialTool;
/// True if the status bar should be hidden or false if it should be shown.
@property (nonatomic) BOOL prefersStatusBarHidden;
/// The style of the device’s status bar.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// Top bar of TCMaskView
@property (nonatomic, strong) TCUIView * _Nonnull topBar;
/// Bottom bar of TCMaskView
@property (nonatomic, strong) TCUIView * _Nonnull bottomBar;
/// Tool panel of TCMaskView
@property (nonatomic, strong) TCUIView * _Nonnull toolMenu;
/// Setting view of TCMaskView
@property (nonatomic, strong) TCUIView * _Nonnull settingView;
/// Image view of TCMaskView
@property (nonatomic, strong) TCUIView * _Nonnull imageView;
/// Test devices in development
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull testDevices;
/// Initial state of TCMaskView
@property (nonatomic) enum TCMaskViewState initialState;
/// Presents the TCMaskView controller modally, which takes over the entire screen until the user closes or completes it.
/// Set rootViewController to the current view controller at the time this method is called.
/// <em>Delegates:</em>
/// tcMaskViewDidExit: is called before TCMaskView is about to exit
/// tcMaskViewDidComplete: is called before TCMaskView is about to complete
/// \param rootViewController The root view controller from which TCMaskView controller is presented
///
/// \param animated Specify true to animate the transition or false if you do not want the transition to be animated.
///
- (void)presentFromRootViewController:(UIViewController * _Nonnull)rootViewController animated:(BOOL)animated;
/// Pushes a TCMaskView controller onto the navigationController’s stack and updates the display.
/// TCMaskView becomes the top view controller on the navigation stack. Pushing a view controller causes its view to be embedded in the navigation interface. If the animated parameter is true, the view is animated into position; otherwise, the view is simply displayed in its final location.
/// In addition to displaying the view associated with the new view controller at the top of the stack, this method also updates the navigation bar and tool bar accordingly. For information on how the navigation bar is updated, see Updating the Navigation Bar.
/// <em>Delegates:</em>
/// tcMaskViewDidExit: is called before TCMaskView is about to exit
/// tcMaskViewDidComplete: is called before TCMaskView is about to complete
/// tcMaskViewWillPushViewController: is called before navigation controller is about to accomplish TCMaskView and process to the next UIViewController
/// \param navigationController UINavigationController onto which TCMaskView is pushed
///
/// \param animated Specify true to animate the transition or false if you do not want the transition to be animated.
///
- (void)presentFromNavigationController:(UINavigationController * _Nonnull)navigationController animated:(BOOL)animated;
/// Set the initial mask value of TCMaksView.
/// \param mask Initial mask value, the entire initial mask will be filled with this value
///
- (void)setInitialMaskWithValue:(uint8_t)mask;
/// Set the initial mask value of TCMaksView.
/// \param mask Initial mask value, mask length should match TCMaskView image size (mask.count == image.size.width * image.size.height)
///
- (void)setInitialMaskWithArray:(NSArray<NSNumber *> * _Nonnull)mask;
/// Set the initial mask value of TCMaksView.
/// \param mask Initial mask value
///
/// \param size Size of mask, mask length should match size (mask.count == size.width * size.height), if size is not the same as image size, the initial mask will be scalled to fit image size.
///
- (void)setInitialMask:(NSArray<NSNumber *> * _Nonnull)mask size:(CGSize)size;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Delegate methods for TCMaskView, which includes:
/// <ul>
///   <li>
///     tcMaskViewDidExit: is called after TCMaskView exits
///   </li>
///   <li>
///     tcMaskViewDidComplete: is called after a popup TCMaskView completes
///   </li>
///   <li>
///     tcMaskViewWillPushViewController: is called before navigation controller is about to accomplish TCMaskView and process to the next UIViewController
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP6TCMask18TCMaskViewDelegate_")
@protocol TCMaskViewDelegate
@optional
/// Called when the user taps ‘X’ button and TCMaskView exits.
/// \param mask Image masking result
///
/// \param image The original image provided to TCMaskView when ‘present’ was called
///
- (void)tcMaskViewDidExitWithMask:(TCMask * _Nonnull)mask image:(UIImage * _Nonnull)image;
/// Called when the user taps ‘✓’ button and TCMaskView completes.
/// \param mask Image masking result
///
/// \param image The original image provided to TCMaskView when ‘present’ was called
///
- (void)tcMaskViewDidCompleteWithMask:(TCMask * _Nonnull)mask image:(UIImage * _Nonnull)image;
/// Called when the user taps ‘->’ button and UINavigationController is about to process to next UIViewController.
/// \param mask Image masking result
///
/// \param image The original image provided to TCMaskView when ‘present’ was called
///
///
/// returns:
/// The next UIViewController where UINavigationController is about to process to
- (UIViewController * _Null_unspecified)tcMaskViewWillPushViewControllerWithMask:(TCMask * _Nonnull)mask image:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
@end

@class UIColor;

/// TCMaskViewMode defines how the current masking result is shown to the user, the result value (v) shown to user is blended with current mask (m) by foreground image/color (f) and background image/color (b):
/// <ul>
///   <li>
///     If inverted is false: v = f * m + b * (1 - m)
///   </li>
///   <li>
///     If inverted is true: v = f * (1 - m) + b * m
///   </li>
/// </ul>
/// For both foreground and background settings:
/// <ul>
///   <li>
///     If image is not nil, image will be used
///   </li>
///   <li>
///     If image is nil and color is not nil, color will be used
///   </li>
///   <li>
///     If both image and color are nil, foreground will be set to a PNG transparent color and background will be set to the image of masking
///   </li>
/// </ul>
SWIFT_CLASS("_TtC6TCMask14TCMaskViewMode")
@interface TCMaskViewMode : NSObject
/// Initialize a TCMaskViewMode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize a TCMaskViewMode
- (nonnull instancetype)initWithForegroundColor:(UIColor * _Nonnull)foregroundColor backgroundColor:(UIColor * _Nonnull)backgroundColor isInverted:(BOOL)isInverted OBJC_DESIGNATED_INITIALIZER;
/// Initialize a TCMaskViewMode
- (nonnull instancetype)initWithForegroundImage:(UIImage * _Null_unspecified)foregroundImage backgroundColor:(UIColor * _Nonnull)backgroundColor isInverted:(BOOL)isInverted OBJC_DESIGNATED_INITIALIZER;
/// Initialize a TCMaskViewMode
- (nonnull instancetype)initWithForegroundColor:(UIColor * _Nonnull)foregroundColor backgroundImage:(UIImage * _Null_unspecified)backgroundImage isInverted:(BOOL)isInverted OBJC_DESIGNATED_INITIALIZER;
/// Initialize a TCMaskViewMode
- (nonnull instancetype)initWithForegroundImage:(UIImage * _Null_unspecified)foregroundImage backgroundImage:(UIImage * _Null_unspecified)backgroundImage isInverted:(BOOL)isInverted OBJC_DESIGNATED_INITIALIZER;
/// Background color of TCMaskViewMode
@property (nonatomic, strong) UIColor * _Null_unspecified backgroundColor;
/// Foreground color of TCMaskViewMode
@property (nonatomic, strong) UIColor * _Null_unspecified foregroundColor;
/// Background image of TCMaskViewMode
@property (nonatomic, strong) UIImage * _Null_unspecified backgroundImage;
/// Foreground image of TCMaskViewMode
@property (nonatomic, strong) UIImage * _Null_unspecified foregroundImage;
/// A Boolean value that determines whether the blending between foreground and background color/image should be inverted.
/// The default value is false.
@property (nonatomic) BOOL isInverted;
/// Create a TCMaskViewMode which looks like a PNG transparent pattern.
///
/// returns:
/// A new TCMaskViewMode which looks like a PNG transparent pattern.
+ (TCMaskViewMode * _Nonnull)transparent SWIFT_WARN_UNUSED_RESULT;
@end

/// State of TCMaskView
typedef SWIFT_ENUM(NSInteger, TCMaskViewState, closed) {
/// Add
  TCMaskViewStateAdd = 0,
/// Subtract
  TCMaskViewStateSubtract = 1,
};


/// The TCUIView defines a UI component in TCMaskView.
/// You can change the property in TCUIView to customize the UI style of TCMaskView
SWIFT_CLASS("_TtC6TCMask8TCUIView")
@interface TCUIView : NSObject
/// Background color of the view
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Tint color of the view, inside which the color of all the buttons and icons will be set to tint color
@property (nonatomic, strong) UIColor * _Nonnull tintColor;
/// Highlighted color of the view, inside which the highlighted color of all the buttons and icons will be set to highlighted color
@property (nonatomic, strong) UIColor * _Nonnull highlightedColor;
/// Text color of the view, inside which the text color of all the labels will be set to text color
@property (nonatomic, strong) UIColor * _Nonnull textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end











#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
